# GitHub Action to compile an autotools based source project.

name: Build autotools project
description: Build a source project that uses autotools
author: gsi

inputs:

  repository:
    description: 'git repository, defaults to current repo'
    required: false
    default: ''

  repo-ref:
    description: 'repository ref (branch, tag)'
    required: false
    default: ''

  source-path:
    description: 'source directory, defaults to current dir'
    required: false
    default: '.'

  build-path:
    description: 'build directory, defaults to source dir'
    required: false
    default: ''

  config-prep:
    description: 'command to execute before configure call'
    required: false
    default: 'if [ -n autogen.sh ]; then ./autogen.sh; else autoreconf -i; fi'

  config-args:
    description: 'additional arguments to configure call'
    required: false
    default: ''

  build-tool:
    description: 'build utility, defaults to make'
    required: false
    default: 'make'

  check-target:
    description: 'make target to check binaries, none by default'
    required: false
    default: 'none'

  install-target:
    description: 'make target to install binaries, install by default'
    required: false
    default: 'install'

  steps-sequence:
    description: 'list of steps to execute, all steps by default'
    required: false
    default: ' checkout makedirs prepare configure compile check install '
    # Avoid the "A sequence was not expected" error message.

runs:
  using: 'composite'
  steps:

  - name: Test diagnostics
    # HACK Used during development and maintenance of the action.
    if: false
    shell: bash
    run: |
      echo "===== --------------------"
      echo "make check condition checks"
      echo "seq-contains " ${{ contains(inputs.steps-sequence, ' check ') }}
      echo "non-empty? " ${{ inputs.check-target != '' }}
      echo "not-none? " ${{ inputs.check-target != 'none' }}
      echo "combo " ${{ contains(inputs.steps-sequence, ' check ') && inputs.check-target != '' && inputs.check-target != 'none' }}
      echo "command " ${{ inputs.build-tool }} ${{ inputs.check-target }}
      echo "===== --------------------"

  - name: Checkout sources
    if: contains(inputs.steps-sequence, ' checkout ')
    uses: actions/checkout@v2
    with:
      repository: ${{ inputs.repository }}
      ref: ${{ inputs.repo-ref }}
      path: ${{ inputs.source-path }}

  - name: Create directories
    if: contains(inputs.steps-sequence, ' makedirs ')
    shell: bash
    run: |
      if [ -n "${{ inputs.source-path }}" ]; then mkdir -p "${{ inputs.source-path }}"; cd "${{ inputs.source-path }}"; fi
      if [ -n "${{ inputs.build-path }}" ]; then mkdir -p "${{ inputs.build-path }}"; fi

  - name: Prepare configure
    if: contains(inputs.steps-sequence, ' prepare ')
    shell: bash
    run: |
      if [ -n "${{ inputs.source-path }}" ]; then cd "${{ inputs.source-path }}"; fi
      ${{ inputs.config-prep }}

  - name: Configure sources
    if: contains(inputs.steps-sequence, ' configure ')
    shell: bash
    run: |
      if [ -n "${{ inputs.source-path }}" ]; then cd "${{ inputs.source-path }}"; fi
      S=$( pwd ); if [ -n "${{ inputs.build-path }}" ]; then cd "${{ inputs.build-path }}"; fi
      $S/configure ${{ inputs.config-args }}

  - name: Compile sources
    if: contains(inputs.steps-sequence, ' compile ')
    shell: bash
    run: |
      if [ -n "${{ inputs.source-path }}" ]; then cd "${{ inputs.source-path }}"; fi
      if [ -n "${{ inputs.build-path }}" ]; then cd "${{ inputs.build-path }}"; fi
      ${{ inputs.build-tool }}

  - name: Test binaries
    if: contains(inputs.steps-sequence, ' check ') && inputs.check-target != '' && inputs.check-target != 'none'
    shell: bash
    run: |
      if [ -n "${{ inputs.source-path }}" ]; then cd "${{ inputs.source-path }}"; fi
      if [ -n "${{ inputs.build-path }}" ]; then cd "${{ inputs.build-path }}"; fi
      ${{ inputs.build-tool }} ${{ inputs.check-target }}

  - name: Install binaries
    if: contains(inputs.steps-sequence, ' install ')
    shell: bash
    run: |
      if [ -n "${{ inputs.source-path }}" ]; then cd "${{ inputs.source-path }}"; fi
      if [ -n "${{ inputs.build-path }}" ]; then cd "${{ inputs.build-path }}"; fi
      ${{ inputs.build-tool }} ${{ inputs.install-target }}
